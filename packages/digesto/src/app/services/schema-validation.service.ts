import { buildTableSchema } from "../utils/zod-schema-builder.js";
import { YmlService } from "./yml.service.js";

type TableSchemas = Record<string, ReturnType<typeof buildTableSchema>>;

export class SchemaValidationService {
  private tableSchemas: TableSchemas | null = null;

  constructor(private readonly ymlService: YmlService) {
    this.loadTablesSchemaValidation();
  }

  private loadTablesSchemaValidation() {
    if (!this.ymlService.parsedContent) {
      return;
    }

    const tableSchemas: TableSchemas = {};

    for (const tableDef of Object.values(
      this.ymlService.parsedContent.tables
    )) {
      tableSchemas[tableDef.tableName] = buildTableSchema(tableDef);
    }

    this.tableSchemas = tableSchemas;
  }

  private getTableSchemaByTableName(tableName: string) {
    const ymlContent = this.ymlService.parsedContent;
    return Object.values(ymlContent?.tables ?? {}).find(
      (item) => item.tableName === tableName
    );
  }

  validateTableSchema(
    tableName: string,
    data: Record<string, unknown>,
    options?: { omitFields: Record<string, boolean> }
  ) {
    this.ymlService.load();

    if (!this.tableSchemas || !this.ymlService.parsedContent) {
      return;
    }

    let zodSchema = this.tableSchemas[tableName];

    if (!zodSchema) {
      return;
    }

    const tableSchema = this.getTableSchemaByTableName(tableName);

    let omitFields = options?.omitFields ?? {};

    if (tableSchema) {
      // Omit auto-generated fields
      const omitAutoGeneratedFields = Object.entries(
        tableSchema.columns
      ).reduce((acc, curr) => {
        const [columnName, columnOptions] = curr;

        if (columnOptions.generated) {
          return {
            ...acc,
            [columnName]: true,
          };
        }

        return acc;
      }, {});

      omitFields = {
        ...omitAutoGeneratedFields,
        ...omitFields,
      };
    }

    if (Object.keys(omitFields ?? {}).length > 0) {
      zodSchema = zodSchema.omit(omitFields as any);
    }

    zodSchema.parse(data);
  }
}
